// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/SokratisChaimanas/platform-go-challenge/ent/asset"
	"github.com/SokratisChaimanas/platform-go-challenge/ent/favourite"
	"github.com/SokratisChaimanas/platform-go-challenge/ent/predicate"
	"github.com/google/uuid"
)

// AssetUpdate is the builder for updating Asset entities.
type AssetUpdate struct {
	config
	hooks    []Hook
	mutation *AssetMutation
}

// Where appends a list predicates to the AssetUpdate builder.
func (_u *AssetUpdate) Where(ps ...predicate.Asset) *AssetUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetDescription sets the "description" field.
func (_u *AssetUpdate) SetDescription(v string) *AssetUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *AssetUpdate) SetNillableDescription(v *string) *AssetUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// SetPayload sets the "payload" field.
func (_u *AssetUpdate) SetPayload(v map[string]interface{}) *AssetUpdate {
	_u.mutation.SetPayload(v)
	return _u
}

// AddFavouriteIDs adds the "favourites" edge to the Favourite entity by IDs.
func (_u *AssetUpdate) AddFavouriteIDs(ids ...uuid.UUID) *AssetUpdate {
	_u.mutation.AddFavouriteIDs(ids...)
	return _u
}

// AddFavourites adds the "favourites" edges to the Favourite entity.
func (_u *AssetUpdate) AddFavourites(v ...*Favourite) *AssetUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFavouriteIDs(ids...)
}

// Mutation returns the AssetMutation object of the builder.
func (_u *AssetUpdate) Mutation() *AssetMutation {
	return _u.mutation
}

// ClearFavourites clears all "favourites" edges to the Favourite entity.
func (_u *AssetUpdate) ClearFavourites() *AssetUpdate {
	_u.mutation.ClearFavourites()
	return _u
}

// RemoveFavouriteIDs removes the "favourites" edge to Favourite entities by IDs.
func (_u *AssetUpdate) RemoveFavouriteIDs(ids ...uuid.UUID) *AssetUpdate {
	_u.mutation.RemoveFavouriteIDs(ids...)
	return _u
}

// RemoveFavourites removes "favourites" edges to Favourite entities.
func (_u *AssetUpdate) RemoveFavourites(v ...*Favourite) *AssetUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFavouriteIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *AssetUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AssetUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *AssetUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AssetUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *AssetUpdate) check() error {
	if v, ok := _u.mutation.Description(); ok {
		if err := asset.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Asset.description": %w`, err)}
		}
	}
	return nil
}

func (_u *AssetUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(asset.Table, asset.Columns, sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(asset.FieldDescription, field.TypeString, value)
	}
	if value, ok := _u.mutation.Payload(); ok {
		_spec.SetField(asset.FieldPayload, field.TypeJSON, value)
	}
	if _u.mutation.FavouritesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.FavouritesTable,
			Columns: []string{asset.FavouritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(favourite.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFavouritesIDs(); len(nodes) > 0 && !_u.mutation.FavouritesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.FavouritesTable,
			Columns: []string{asset.FavouritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(favourite.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FavouritesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.FavouritesTable,
			Columns: []string{asset.FavouritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(favourite.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// AssetUpdateOne is the builder for updating a single Asset entity.
type AssetUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AssetMutation
}

// SetDescription sets the "description" field.
func (_u *AssetUpdateOne) SetDescription(v string) *AssetUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *AssetUpdateOne) SetNillableDescription(v *string) *AssetUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// SetPayload sets the "payload" field.
func (_u *AssetUpdateOne) SetPayload(v map[string]interface{}) *AssetUpdateOne {
	_u.mutation.SetPayload(v)
	return _u
}

// AddFavouriteIDs adds the "favourites" edge to the Favourite entity by IDs.
func (_u *AssetUpdateOne) AddFavouriteIDs(ids ...uuid.UUID) *AssetUpdateOne {
	_u.mutation.AddFavouriteIDs(ids...)
	return _u
}

// AddFavourites adds the "favourites" edges to the Favourite entity.
func (_u *AssetUpdateOne) AddFavourites(v ...*Favourite) *AssetUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddFavouriteIDs(ids...)
}

// Mutation returns the AssetMutation object of the builder.
func (_u *AssetUpdateOne) Mutation() *AssetMutation {
	return _u.mutation
}

// ClearFavourites clears all "favourites" edges to the Favourite entity.
func (_u *AssetUpdateOne) ClearFavourites() *AssetUpdateOne {
	_u.mutation.ClearFavourites()
	return _u
}

// RemoveFavouriteIDs removes the "favourites" edge to Favourite entities by IDs.
func (_u *AssetUpdateOne) RemoveFavouriteIDs(ids ...uuid.UUID) *AssetUpdateOne {
	_u.mutation.RemoveFavouriteIDs(ids...)
	return _u
}

// RemoveFavourites removes "favourites" edges to Favourite entities.
func (_u *AssetUpdateOne) RemoveFavourites(v ...*Favourite) *AssetUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveFavouriteIDs(ids...)
}

// Where appends a list predicates to the AssetUpdate builder.
func (_u *AssetUpdateOne) Where(ps ...predicate.Asset) *AssetUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *AssetUpdateOne) Select(field string, fields ...string) *AssetUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Asset entity.
func (_u *AssetUpdateOne) Save(ctx context.Context) (*Asset, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AssetUpdateOne) SaveX(ctx context.Context) *Asset {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *AssetUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AssetUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *AssetUpdateOne) check() error {
	if v, ok := _u.mutation.Description(); ok {
		if err := asset.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Asset.description": %w`, err)}
		}
	}
	return nil
}

func (_u *AssetUpdateOne) sqlSave(ctx context.Context) (_node *Asset, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(asset.Table, asset.Columns, sqlgraph.NewFieldSpec(asset.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Asset.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, asset.FieldID)
		for _, f := range fields {
			if !asset.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != asset.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(asset.FieldDescription, field.TypeString, value)
	}
	if value, ok := _u.mutation.Payload(); ok {
		_spec.SetField(asset.FieldPayload, field.TypeJSON, value)
	}
	if _u.mutation.FavouritesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.FavouritesTable,
			Columns: []string{asset.FavouritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(favourite.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedFavouritesIDs(); len(nodes) > 0 && !_u.mutation.FavouritesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.FavouritesTable,
			Columns: []string{asset.FavouritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(favourite.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.FavouritesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   asset.FavouritesTable,
			Columns: []string{asset.FavouritesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(favourite.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Asset{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{asset.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
