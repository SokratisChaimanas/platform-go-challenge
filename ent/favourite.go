// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/SokratisChaimanas/platform-go-challenge/ent/asset"
	"github.com/SokratisChaimanas/platform-go-challenge/ent/favourite"
	"github.com/SokratisChaimanas/platform-go-challenge/ent/user"
	"github.com/google/uuid"
)

// Favourite is the model entity for the Favourite schema.
type Favourite struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uuid.UUID `json:"user_id,omitempty"`
	// AssetID holds the value of the "asset_id" field.
	AssetID uuid.UUID `json:"asset_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FavouriteQuery when eager-loading is set.
	Edges        FavouriteEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FavouriteEdges holds the relations/edges for other nodes in the graph.
type FavouriteEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Asset holds the value of the asset edge.
	Asset *Asset `json:"asset,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FavouriteEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// AssetOrErr returns the Asset value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FavouriteEdges) AssetOrErr() (*Asset, error) {
	if e.Asset != nil {
		return e.Asset, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: asset.Label}
	}
	return nil, &NotLoadedError{edge: "asset"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Favourite) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case favourite.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case favourite.FieldID, favourite.FieldUserID, favourite.FieldAssetID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Favourite fields.
func (_m *Favourite) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case favourite.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case favourite.FieldUserID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value != nil {
				_m.UserID = *value
			}
		case favourite.FieldAssetID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field asset_id", values[i])
			} else if value != nil {
				_m.AssetID = *value
			}
		case favourite.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Favourite.
// This includes values selected through modifiers, order, etc.
func (_m *Favourite) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Favourite entity.
func (_m *Favourite) QueryUser() *UserQuery {
	return NewFavouriteClient(_m.config).QueryUser(_m)
}

// QueryAsset queries the "asset" edge of the Favourite entity.
func (_m *Favourite) QueryAsset() *AssetQuery {
	return NewFavouriteClient(_m.config).QueryAsset(_m)
}

// Update returns a builder for updating this Favourite.
// Note that you need to call Favourite.Unwrap() before calling this method if this Favourite
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Favourite) Update() *FavouriteUpdateOne {
	return NewFavouriteClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Favourite entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Favourite) Unwrap() *Favourite {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Favourite is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Favourite) String() string {
	var builder strings.Builder
	builder.WriteString("Favourite(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.UserID))
	builder.WriteString(", ")
	builder.WriteString("asset_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.AssetID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Favourites is a parsable slice of Favourite.
type Favourites []*Favourite
