// Code generated by ent, DO NOT EDIT.

package asset

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the asset type in the database.
	Label = "asset"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldAssetType holds the string denoting the asset_type field in the database.
	FieldAssetType = "asset_type"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldPayload holds the string denoting the payload field in the database.
	FieldPayload = "payload"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeFavourites holds the string denoting the favourites edge name in mutations.
	EdgeFavourites = "favourites"
	// Table holds the table name of the asset in the database.
	Table = "assets"
	// FavouritesTable is the table that holds the favourites relation/edge.
	FavouritesTable = "favourites"
	// FavouritesInverseTable is the table name for the Favourite entity.
	// It exists in this package in order to avoid circular dependency with the "favourite" package.
	FavouritesInverseTable = "favourites"
	// FavouritesColumn is the table column denoting the favourites relation/edge.
	FavouritesColumn = "asset_id"
)

// Columns holds all SQL columns for asset fields.
var Columns = []string{
	FieldID,
	FieldAssetType,
	FieldDescription,
	FieldPayload,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DescriptionValidator is a validator for the "description" field. It is called by the builders before save.
	DescriptionValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// AssetType defines the type for the "asset_type" enum field.
type AssetType string

// AssetType values.
const (
	AssetTypeChart    AssetType = "chart"
	AssetTypeInsight  AssetType = "insight"
	AssetTypeAudience AssetType = "audience"
)

func (at AssetType) String() string {
	return string(at)
}

// AssetTypeValidator is a validator for the "asset_type" field enum values. It is called by the builders before save.
func AssetTypeValidator(at AssetType) error {
	switch at {
	case AssetTypeChart, AssetTypeInsight, AssetTypeAudience:
		return nil
	default:
		return fmt.Errorf("asset: invalid enum value for asset_type field: %q", at)
	}
}

// OrderOption defines the ordering options for the Asset queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByAssetType orders the results by the asset_type field.
func ByAssetType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAssetType, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByFavouritesCount orders the results by favourites count.
func ByFavouritesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFavouritesStep(), opts...)
	}
}

// ByFavourites orders the results by favourites terms.
func ByFavourites(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFavouritesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newFavouritesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FavouritesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, FavouritesTable, FavouritesColumn),
	)
}
